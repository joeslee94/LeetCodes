//HashSet
public class Solution
{
    public int LengthOfLongestSubstring(string s)
    {
        if(s.Length < 2)
        {
            return s.Length;
        }
        
        int longest = 0;
        HashSet<char> uniqueLetters;
        
        for(int i = 0; i < s.Length; i++)
        {
            uniqueLetters = new HashSet<char>();

            for(int j = i; j < s.Length; j++)
            {
                char currChar = s[j];
                if(uniqueLetters.Contains(currChar))
                {
                    longest = Math.Max(longest, uniqueLetters.Count);
                    uniqueLetters.Clear();
                    break;
                }
                else
                    uniqueLetters.Add(currChar);
            }
            longest = Math.Max(longest, uniqueLetters.Count);
        }
        return longest;
    }
}

//Dictionary
public class Solution
{
    public int LengthOfLongestSubstring(string s)
    {
        Dictionary<char, int> stringDict = new Dictionary<char, int>();
        int longestLength = 0;
        for(int i = 0; i < s.Length; i++)
        {
            if (stringDict.TryGetValue(s[i], out int index))
            {
                longestLength = Math.Max(longestLength, stringDict.Count);
                i = index;
                stringDict.Clear();
            }
            else
            {
                stringDict.Add(s[i], i);
            }
        }
        longestLength = Math.Max(longestLength, stringDict.Count);
        return longestLength;
    }
}
