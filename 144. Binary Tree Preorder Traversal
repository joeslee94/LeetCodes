/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
//Solution 2
public class Solution 
{
    public IList<int> PreorderTraversal(TreeNode root)
    {
        List<int> result = new List<int>();
        
        if(root != null)
        {    
            return TraversePreOrder(root, result);    
        }
        else
            return result;
    }
    
    public List<int> TraversePreOrder(TreeNode node, List<int> result)
    {
        result.Add(node.val);
        
        if(node.left != null)
        {
            TraversePreOrder(node.left, result);
        }
        
        if(node.right != null)
        {
            TraversePreOrder(node.right, result);
        }
        
        return result;
    }
}
//     1
//  2     3
//4  5   6  7

//1st --> add 1 to list [1]
//recursive for node(1).left
//node(1).left is not null --> 2 is added to list --> [1, 2]

//node(2).left is not null --> so recursive call to node(4)
//4 is added to list --> [1, 2, 4] line 29
//node(4).left is null AND node(4).right is null so return [1, 2, 4] to node(2)'s recursive call on stack

//node(2).right is not null --> so recursive call to node(5)
//5 is added to list that was returned [1, 2, 4, 5] to node(2) after node(4)'s recursive stack completed
//node(5).left and node(5).right are null so return [1, 2, 4, 5] to node(2)'s recursive stack call

//node(2) has explored its left and right so it is at line 41 return [1, 2, 4, 5] to node(1)'s original method call

//node(1) has completed its left search and moves to line 36
//node(1).right is not null --> so recursive call to node(3)
//3 is added to list --> [1, 2, 4, 5, 3];

//node(3).left is not null --> so recursive call to node(6)
//6 is added to list --> [1, 2, 4, 5, 3, 6]
//node(6).left and .right are null so return result to node(3)'s recursive call on stack

//node(3) resumes on line 36 and node(3).right is not null --> recursive call on node(7)
//7 is added to list --> [1, 2, 4, 5, 3, 6, 7]
//node(7).right and left are null so return list to node(3)'s recursive call
//node(3)'s recursive call is at line 41

//return list to node(1)'s original method call
//original method call is at line 41
//return list [1, 2, 4, 5, 3, 6, 7]

//Solution 1
public class Solution {
    public IList<int> PreorderTraversal(TreeNode root)
    {
        //creating an IList vs List the difference is that Ilist 
        IList<int> nodeValues = new List<int>();
        
        //checking to see if root is null in this case root is the entire TreeNode
        if(root == null)
            return nodeValues;
        
        //creating a stack to put each LEVEL of the binary tree into
        Stack<TreeNode> nodeStack = new Stack<TreeNode>();
        
        //Pushing the root into the stack
        nodeStack.Push(root);
        //TreeNode root is structered as follow
        //Left      Right        
        //3         null
        //null       2
        //      1 (ROOT OF TREENODE)
        
     
        //nodeStack will be the following after it is pushed
        //Left     Right
        //     1         (top) Last In First Out
        //null     2
        //3        null     (bottom)
        
        while(nodeStack.Count > 0)
        //first cycle: 3 elements in stack (1, (null, 2), (3, null))
        //second cycle: 2 elements in stack (2, (3, null))
        //third cycle: 1 element in stack (3)
        //NO fourth cycle, 3 was popped off so the count is 0
        {
            //Creating a NODE and equating it to the first item popped off of STACK
            TreeNode node = nodeStack.Pop(); 
            //first cycle: 1 is popped off
            //second cycle: 2 is popped off
            //third cycle: 3 is popped off
            
            nodeValues.Add(node.val);
            //first cycle: 1 is added because it was popped off and stored into node and node.val is 1
            //second cycle: 2 is added
            //third cycle: 3 is added
            
                        
            //why right before left?
            //BECAUSE if there is a value to the RIGHT and LEFT,
            //then the LEFT value needs to be on top (pushed into stack LAST) to be popped off first
            //because we are reading the tree left to right.
            
            if(node.right != null) 
                nodeStack.Push(node.right); 
            //first cycle: node to the right of 1 is 2. so 2 is pushed onto the TOP of the stack.
            //second cycle: node to the right of 2 is null, so nothing us pushed to the stack.
            //third cycle: node to the right is null nothing is pushed

            if(node.left != null)
                nodeStack.Push(node.left);
            //first cycle: node to the left of 1 is null. so NOTHING is pushed to the top of the stack.
            //second cycle: node to the left of 2 is 3, so 3 is pushed to the top of the stack.
            //third cycle: node to the left is null nothing is pushed.
        }
        return nodeValues;
    }
}
