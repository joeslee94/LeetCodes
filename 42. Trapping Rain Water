//Solution Two
public class Solution
{
    public int Trap(int[] height)
    {
        if(height.Length < 3)
        {
            return 0;
        }
        
        int left = 0;
        int right = height.Length - 1;
        int maxLeft = height[left];
        int maxRight = height[right];
        int totalWater = 0;

        while(left < right)
        {
            if(height[left] <= height[right])
            {
                if(maxLeft <= height[left])
                {
                    maxLeft = height[left];
                    left++;
                }
                else
                {
                    totalWater += maxLeft - height[left];
                    left++;
                }
            }
            else
            {
                if(maxRight <= height[right])
                {
                    maxRight = height[right];
                    right--;
                }
                else
                {
                    totalWater += maxRight - height[right];
                    right--;
                }
            }
        }
        return totalWater;
    }
}

//Solution One
public class Solution
{
    public int Trap(int[] height)
    {
        int p = 1;
        int maxL = 0;
        int maxR = 0;
        int totalWater = 0;

        while(p < height.Length)
        {
            for(int i = p - 1; i >= 0; i--)
            {
                
                if(maxL <= height[i])
                {
                    maxL = height[i];
                }
            }

            for(int i = p + 1; i < height.Length; i++)
            {
                if(maxR <= height[i])
                {
                    maxR = height[i];
                }
            }

            int currWater = Math.Min(maxL, maxR) - height[p];

            if(currWater > 0)
            {
                totalWater += currWater;
            }
            
            maxL = 0;
            maxR = 0;
            p++;
        }
        
        return totalWater;
    }
}
